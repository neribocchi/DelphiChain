{******************************************************************************}
{                                                                              }
{                                  NeriChain                                   }
{                                                                              }
{             Copyright(c) 2024 Luis Bocchi <lbocchi@gmail.com>                }
{                                                                              }
{             Distributed under GNU AGPL v3.0 with Commons Clause              }
{                                                                              }
{   This program is free software: you can redistribute it and/or modify       }
{   it under the terms of the GNU Affero General Public License as published   }
{   by the Free Software Foundation, either version 3 of the License, or       }
{   (at your option) any later version.                                        }
{                                                                              }
{   This program is distributed in the hope that it will be useful,            }
{   but WITHOUT ANY WARRANTY; without even the implied warranty of             }
{   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the              }
{   GNU Affero General Public License for more details.                        }
{                                                                              }
{   You should have received a copy of the GNU Affero General Public License   }
{   along with this program.  If not, see <https://www.gnu.org/licenses/>      }
{                                                                              }
{******************************************************************************}
unit Block;


interface

uses System.Types,
     System.SysUtils,
     web3.utils,
     Velthuis.BigIntegers;

Type

TBlock = Class(TObject)
  private
    index:biginteger;
    prevBlock:TBlock;
    prevhash:TBytes;
    nonce:biginteger;
    data:TBytes;
    hash:TBytes;
  public
  constructor create(aBlock:TBlock;aData:TBytes);
  function calculateBlockHash:TBytes;
  function getHash:TBytes;
  function getPrevHash:TBytes;
  function getIndex:BigInteger;
  function getPrevBlock:TBlock;
  procedure setHash(h:TBytes);  //force hash to test integrity failure
End;

implementation

{ TBlock }

constructor TBlock.create(aBlock: TBlock; aData:TBytes);
begin
  if assigned(aBlock) then
  begin
    prevBlock:=aBlock;
    prevHash:=aBlock.getHash;
    index:=aBlock.index+1;
    nonce:=aBlock.nonce+1;
  end
  else
  begin
    //this is a genesis block
    index:=0;
    nonce:=0;
  end;
  data:=aData;
  hash:=calculateBlockHash;
end;



function TBlock.getHash: TBytes;
begin
  result:=hash;
end;

function TBlock.getIndex: Biginteger;
begin
  result:=index;
end;

function TBlock.getPrevBlock: TBlock;
begin
  result:=prevBlock;
end;

function TBlock.getPrevHash: TBytes;
begin
  result:=prevHash;
end;

procedure TBlock.setHash(h: TBytes);
begin
  hash:=h;
end;

function TBlock.calculateBlockHash: TBytes;
var hashing:TBytes;
begin
  hashing:=TEncoding.Unicode.GetBytes(index.ToString)+
           TEncoding.Unicode.GetBytes(nonce.ToString)+
           prevHash+
           data;
  result:=sha3(hashing);
end;



end.
